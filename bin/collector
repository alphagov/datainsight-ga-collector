#!/usr/bin/env ruby
# Collects the statistics from google analytics.
# Run: './bin/collector -t TOKEN -c ConfigName print' (the first time)
# Run: './bin/collector -c ConfigName print' (subsequent times)
#
# To obtain authorisation code please visit:
#
# https://accounts.google.com/o/oauth2/auth?response_type=code&scope=https://www.googleapis.com/auth/analytics.readonly&redirect_uri=urn:ietf:wg:oauth:2.0:oob&client_id=1054017153726.apps.googleusercontent.com

require 'bundler/setup'
Bundler.require

require_relative '../lib/response/error_response'
require_relative '../lib/collector'

require_relative '../lib/config/weekly_visits'
require_relative '../lib/config/weekly_unique_visitors'
require_relative '../lib/config/hourly_unique_visitors'

include GLI

program_desc 'Collect the statics specified by the configuration from google analytics'

version 0.1

desc 'Only for the first request you need to pass in the authorisation code'
default_value nil
arg_name 'authorisation code'
flag [:a, :authorisation_code]

desc 'The name of the configuration module to specify the what data to collect from GA and where to put it.'
arg_name 'configuration module'
default_value ""
flag [:c, :config]

desc 'Days ago'
arg_name 'how many days to go back'
default_value nil
flag [:d, :days_ago]


def config(global_options)
  config = global_options[:config]
  if GoogleAnalytics::Config::Base.descendants.include?(config)
    config_class = GoogleAnalytics::Config.const_get(config)
    if global_options[:days_ago].nil?
      [config_class.last_before(Date.today)]
    else
      days_ago = global_options[:days_ago].to_i
      config_class.all_within(Date.today - days_ago, Date.today)
    end
  else
    raise "Invalid collector configuration or none given. Please choose a configuration from [#{GoogleAnalytics::Config::Base.descendants.join(", ")}]."
  end
end

def collector(global_options)
  authentication_code = global_options[:authorisation_code]
  GoogleAnalytics::Collector.new(authentication_code, config(global_options))
end


command :print do |c|
  c.desc 'Print out the collected statistics'
  c.action do |global_options, options, args|
    puts collector(global_options).collect_as_json
  end
end


command :broadcast do |c|
  c.desc 'Publish the collected statistics to the queue'
  c.action do |global_options, options, args|
    collector(global_options).broadcast
  end
end


exit run(ARGV)
